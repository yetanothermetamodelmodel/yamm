/*
 * generated by Xtext 2.25.0
 */
package dev.yamm.coreModelDsl.serializer;

import com.google.inject.Inject;
import dev.yamm.coreModelDsl.services.XYammGrammarAccess;
import dev.yamm.coreModelXmi.yamm.YClass;
import dev.yamm.coreModelXmi.yamm.YColorDFAObject;
import dev.yamm.coreModelXmi.yamm.YComment;
import dev.yamm.coreModelXmi.yamm.YCompositeEdge;
import dev.yamm.coreModelXmi.yamm.YConstraint;
import dev.yamm.coreModelXmi.yamm.YCreateInstanceExpression;
import dev.yamm.coreModelXmi.yamm.YEffect;
import dev.yamm.coreModelXmi.yamm.YElementImport;
import dev.yamm.coreModelXmi.yamm.YEnumeration;
import dev.yamm.coreModelXmi.yamm.YEnumerationLiteral;
import dev.yamm.coreModelXmi.yamm.YFeatureCall;
import dev.yamm.coreModelXmi.yamm.YFinalState;
import dev.yamm.coreModelXmi.yamm.YGetInstances;
import dev.yamm.coreModelXmi.yamm.YGetInstancesOfExpression;
import dev.yamm.coreModelXmi.yamm.YGetLayerInformation;
import dev.yamm.coreModelXmi.yamm.YGetObjectManagement;
import dev.yamm.coreModelXmi.yamm.YLoadModel;
import dev.yamm.coreModelXmi.yamm.YMemberFeatureCall;
import dev.yamm.coreModelXmi.yamm.YModel;
import dev.yamm.coreModelXmi.yamm.YObserverAddValue;
import dev.yamm.coreModelXmi.yamm.YOperation;
import dev.yamm.coreModelXmi.yamm.YPackage;
import dev.yamm.coreModelXmi.yamm.YPackageImport;
import dev.yamm.coreModelXmi.yamm.YParameter;
import dev.yamm.coreModelXmi.yamm.YPrimitiveType;
import dev.yamm.coreModelXmi.yamm.YPrintExpression;
import dev.yamm.coreModelXmi.yamm.YProperty;
import dev.yamm.coreModelXmi.yamm.YPseudostate;
import dev.yamm.coreModelXmi.yamm.YSetReturnValue;
import dev.yamm.coreModelXmi.yamm.YSharedEdge;
import dev.yamm.coreModelXmi.yamm.YState;
import dev.yamm.coreModelXmi.yamm.YStateMachine;
import dev.yamm.coreModelXmi.yamm.YTimeStep;
import dev.yamm.coreModelXmi.yamm.YTrAttachment;
import dev.yamm.coreModelXmi.yamm.YTransition;
import dev.yamm.coreModelXmi.yamm.YammPackage;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EcorePackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.common.types.JvmFormalParameter;
import org.eclipse.xtext.common.types.JvmGenericArrayTypeReference;
import org.eclipse.xtext.common.types.JvmInnerTypeReference;
import org.eclipse.xtext.common.types.JvmLowerBound;
import org.eclipse.xtext.common.types.JvmParameterizedTypeReference;
import org.eclipse.xtext.common.types.JvmTypeParameter;
import org.eclipse.xtext.common.types.JvmUpperBound;
import org.eclipse.xtext.common.types.JvmWildcardTypeReference;
import org.eclipse.xtext.common.types.TypesPackage;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.eclipse.xtext.xbase.XAssignment;
import org.eclipse.xtext.xbase.XBasicForLoopExpression;
import org.eclipse.xtext.xbase.XBinaryOperation;
import org.eclipse.xtext.xbase.XBlockExpression;
import org.eclipse.xtext.xbase.XBooleanLiteral;
import org.eclipse.xtext.xbase.XCasePart;
import org.eclipse.xtext.xbase.XCastedExpression;
import org.eclipse.xtext.xbase.XCatchClause;
import org.eclipse.xtext.xbase.XClosure;
import org.eclipse.xtext.xbase.XConstructorCall;
import org.eclipse.xtext.xbase.XDoWhileExpression;
import org.eclipse.xtext.xbase.XForLoopExpression;
import org.eclipse.xtext.xbase.XIfExpression;
import org.eclipse.xtext.xbase.XInstanceOfExpression;
import org.eclipse.xtext.xbase.XListLiteral;
import org.eclipse.xtext.xbase.XNullLiteral;
import org.eclipse.xtext.xbase.XNumberLiteral;
import org.eclipse.xtext.xbase.XPostfixOperation;
import org.eclipse.xtext.xbase.XReturnExpression;
import org.eclipse.xtext.xbase.XSetLiteral;
import org.eclipse.xtext.xbase.XStringLiteral;
import org.eclipse.xtext.xbase.XSwitchExpression;
import org.eclipse.xtext.xbase.XSynchronizedExpression;
import org.eclipse.xtext.xbase.XThrowExpression;
import org.eclipse.xtext.xbase.XTryCatchFinallyExpression;
import org.eclipse.xtext.xbase.XTypeLiteral;
import org.eclipse.xtext.xbase.XUnaryOperation;
import org.eclipse.xtext.xbase.XVariableDeclaration;
import org.eclipse.xtext.xbase.XWhileExpression;
import org.eclipse.xtext.xbase.XbasePackage;
import org.eclipse.xtext.xbase.serializer.XbaseSemanticSequencer;
import org.eclipse.xtext.xtype.XFunctionTypeRef;
import org.eclipse.xtext.xtype.XImportDeclaration;
import org.eclipse.xtext.xtype.XImportSection;
import org.eclipse.xtext.xtype.XtypePackage;

@SuppressWarnings("all")
public class XYammSemanticSequencer extends XbaseSemanticSequencer {

	@Inject
	private XYammGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == EcorePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case EcorePackage.EOBJECT:
				sequence_EObject(context, (EObject) semanticObject); 
				return; 
			}
		else if (epackage == TypesPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TypesPackage.JVM_FORMAL_PARAMETER:
				if (rule == grammarAccess.getFullJvmFormalParameterRule()) {
					sequence_FullJvmFormalParameter(context, (JvmFormalParameter) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmFormalParameterRule()) {
					sequence_JvmFormalParameter(context, (JvmFormalParameter) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_GENERIC_ARRAY_TYPE_REFERENCE:
				sequence_JvmTypeReference(context, (JvmGenericArrayTypeReference) semanticObject); 
				return; 
			case TypesPackage.JVM_INNER_TYPE_REFERENCE:
				sequence_JvmParameterizedTypeReference(context, (JvmInnerTypeReference) semanticObject); 
				return; 
			case TypesPackage.JVM_LOWER_BOUND:
				if (rule == grammarAccess.getJvmLowerBoundAndedRule()) {
					sequence_JvmLowerBoundAnded(context, (JvmLowerBound) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmLowerBoundRule()) {
					sequence_JvmLowerBound(context, (JvmLowerBound) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_PARAMETERIZED_TYPE_REFERENCE:
				if (action == grammarAccess.getJvmParameterizedTypeReferenceAccess().getJvmInnerTypeReferenceOuterAction_1_4_0_0_0()) {
					sequence_JvmParameterizedTypeReference_JvmInnerTypeReference_1_4_0_0_0(context, (JvmParameterizedTypeReference) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmTypeReferenceRule()
						|| action == grammarAccess.getJvmTypeReferenceAccess().getJvmGenericArrayTypeReferenceComponentTypeAction_0_1_0_0()
						|| rule == grammarAccess.getJvmParameterizedTypeReferenceRule()
						|| rule == grammarAccess.getJvmArgumentTypeReferenceRule()) {
					sequence_JvmParameterizedTypeReference(context, (JvmParameterizedTypeReference) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_TYPE_PARAMETER:
				sequence_JvmTypeParameter(context, (JvmTypeParameter) semanticObject); 
				return; 
			case TypesPackage.JVM_UPPER_BOUND:
				if (rule == grammarAccess.getJvmUpperBoundAndedRule()) {
					sequence_JvmUpperBoundAnded(context, (JvmUpperBound) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmUpperBoundRule()) {
					sequence_JvmUpperBound(context, (JvmUpperBound) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_WILDCARD_TYPE_REFERENCE:
				sequence_JvmWildcardTypeReference(context, (JvmWildcardTypeReference) semanticObject); 
				return; 
			}
		else if (epackage == XbasePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case XbasePackage.XASSIGNMENT:
				sequence_XAssignment_XMemberFeatureCall(context, (XAssignment) semanticObject); 
				return; 
			case XbasePackage.XBASIC_FOR_LOOP_EXPRESSION:
				sequence_XBasicForLoopExpression(context, (XBasicForLoopExpression) semanticObject); 
				return; 
			case XbasePackage.XBINARY_OPERATION:
				sequence_XAdditiveExpression_XAndExpression_XAssignment_XEqualityExpression_XMultiplicativeExpression_XOrExpression_XOtherOperatorExpression_XRelationalExpression(context, (XBinaryOperation) semanticObject); 
				return; 
			case XbasePackage.XBLOCK_EXPRESSION:
				if (rule == grammarAccess.getXBlockExpressionRule()
						|| rule == grammarAccess.getXMemberFeatureCallRule()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getYMemberFeatureCallMemberCallTargetAction_1_1_0_0_0()
						|| rule == grammarAccess.getXPrimaryExpressionRule()
						|| rule == grammarAccess.getXAssignmentRule()
						|| action == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_3_1_0_0_0()
						|| rule == grammarAccess.getXExpressionRule()
						|| rule == grammarAccess.getXOrExpressionRule()
						|| action == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAndExpressionRule()
						|| action == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXEqualityExpressionRule()
						|| action == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXRelationalExpressionRule()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOtherOperatorExpressionRule()
						|| action == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAdditiveExpressionRule()
						|| action == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXMultiplicativeExpressionRule()
						|| action == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXUnaryOperationRule()
						|| rule == grammarAccess.getXCastedExpressionRule()
						|| action == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0()
						|| rule == grammarAccess.getXPostfixOperationRule()
						|| action == grammarAccess.getXPostfixOperationAccess().getXPostfixOperationOperandAction_1_0_0()
						|| rule == grammarAccess.getXParenthesizedExpressionRule()
						|| rule == grammarAccess.getXExpressionOrVarDeclarationRule()) {
					sequence_XBlockExpression(context, (XBlockExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getXExpressionInClosureRule()) {
					sequence_XExpressionInClosure(context, (XBlockExpression) semanticObject); 
					return; 
				}
				else break;
			case XbasePackage.XBOOLEAN_LITERAL:
				sequence_XBooleanLiteral(context, (XBooleanLiteral) semanticObject); 
				return; 
			case XbasePackage.XCASE_PART:
				sequence_XCasePart(context, (XCasePart) semanticObject); 
				return; 
			case XbasePackage.XCASTED_EXPRESSION:
				sequence_XCastedExpression(context, (XCastedExpression) semanticObject); 
				return; 
			case XbasePackage.XCATCH_CLAUSE:
				sequence_XCatchClause(context, (XCatchClause) semanticObject); 
				return; 
			case XbasePackage.XCLOSURE:
				if (rule == grammarAccess.getXMemberFeatureCallRule()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getYMemberFeatureCallMemberCallTargetAction_1_1_0_0_0()
						|| rule == grammarAccess.getXPrimaryExpressionRule()
						|| rule == grammarAccess.getXAssignmentRule()
						|| action == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_3_1_0_0_0()
						|| rule == grammarAccess.getXExpressionRule()
						|| rule == grammarAccess.getXOrExpressionRule()
						|| action == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAndExpressionRule()
						|| action == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXEqualityExpressionRule()
						|| action == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXRelationalExpressionRule()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOtherOperatorExpressionRule()
						|| action == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAdditiveExpressionRule()
						|| action == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXMultiplicativeExpressionRule()
						|| action == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXUnaryOperationRule()
						|| rule == grammarAccess.getXCastedExpressionRule()
						|| action == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0()
						|| rule == grammarAccess.getXPostfixOperationRule()
						|| action == grammarAccess.getXPostfixOperationAccess().getXPostfixOperationOperandAction_1_0_0()
						|| rule == grammarAccess.getXLiteralRule()
						|| rule == grammarAccess.getXClosureRule()
						|| rule == grammarAccess.getXParenthesizedExpressionRule()
						|| rule == grammarAccess.getXExpressionOrVarDeclarationRule()) {
					sequence_XClosure(context, (XClosure) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getXShortClosureRule()) {
					sequence_XShortClosure(context, (XClosure) semanticObject); 
					return; 
				}
				else break;
			case XbasePackage.XCONSTRUCTOR_CALL:
				sequence_XConstructorCall(context, (XConstructorCall) semanticObject); 
				return; 
			case XbasePackage.XDO_WHILE_EXPRESSION:
				sequence_XDoWhileExpression(context, (XDoWhileExpression) semanticObject); 
				return; 
			case XbasePackage.XFOR_LOOP_EXPRESSION:
				sequence_XForLoopExpression(context, (XForLoopExpression) semanticObject); 
				return; 
			case XbasePackage.XIF_EXPRESSION:
				sequence_XIfExpression(context, (XIfExpression) semanticObject); 
				return; 
			case XbasePackage.XINSTANCE_OF_EXPRESSION:
				sequence_XRelationalExpression(context, (XInstanceOfExpression) semanticObject); 
				return; 
			case XbasePackage.XLIST_LITERAL:
				sequence_XListLiteral(context, (XListLiteral) semanticObject); 
				return; 
			case XbasePackage.XNULL_LITERAL:
				sequence_XNullLiteral(context, (XNullLiteral) semanticObject); 
				return; 
			case XbasePackage.XNUMBER_LITERAL:
				sequence_XNumberLiteral(context, (XNumberLiteral) semanticObject); 
				return; 
			case XbasePackage.XPOSTFIX_OPERATION:
				sequence_XPostfixOperation(context, (XPostfixOperation) semanticObject); 
				return; 
			case XbasePackage.XRETURN_EXPRESSION:
				sequence_XReturnExpression(context, (XReturnExpression) semanticObject); 
				return; 
			case XbasePackage.XSET_LITERAL:
				sequence_XSetLiteral(context, (XSetLiteral) semanticObject); 
				return; 
			case XbasePackage.XSTRING_LITERAL:
				sequence_XStringLiteral(context, (XStringLiteral) semanticObject); 
				return; 
			case XbasePackage.XSWITCH_EXPRESSION:
				sequence_XSwitchExpression(context, (XSwitchExpression) semanticObject); 
				return; 
			case XbasePackage.XSYNCHRONIZED_EXPRESSION:
				sequence_XSynchronizedExpression(context, (XSynchronizedExpression) semanticObject); 
				return; 
			case XbasePackage.XTHROW_EXPRESSION:
				sequence_XThrowExpression(context, (XThrowExpression) semanticObject); 
				return; 
			case XbasePackage.XTRY_CATCH_FINALLY_EXPRESSION:
				sequence_XTryCatchFinallyExpression(context, (XTryCatchFinallyExpression) semanticObject); 
				return; 
			case XbasePackage.XTYPE_LITERAL:
				sequence_XTypeLiteral(context, (XTypeLiteral) semanticObject); 
				return; 
			case XbasePackage.XUNARY_OPERATION:
				sequence_XUnaryOperation(context, (XUnaryOperation) semanticObject); 
				return; 
			case XbasePackage.XVARIABLE_DECLARATION:
				sequence_XVariableDeclaration(context, (XVariableDeclaration) semanticObject); 
				return; 
			case XbasePackage.XWHILE_EXPRESSION:
				sequence_XWhileExpression(context, (XWhileExpression) semanticObject); 
				return; 
			}
		else if (epackage == XtypePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case XtypePackage.XFUNCTION_TYPE_REF:
				sequence_XFunctionTypeRef(context, (XFunctionTypeRef) semanticObject); 
				return; 
			case XtypePackage.XIMPORT_DECLARATION:
				sequence_XImportDeclaration(context, (XImportDeclaration) semanticObject); 
				return; 
			case XtypePackage.XIMPORT_SECTION:
				sequence_XImportSection(context, (XImportSection) semanticObject); 
				return; 
			}
		else if (epackage == YammPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case YammPackage.YCLASS:
				sequence_YClass(context, (YClass) semanticObject); 
				return; 
			case YammPackage.YCOLOR_DFA_OBJECT:
				sequence_YColorDFAObject(context, (YColorDFAObject) semanticObject); 
				return; 
			case YammPackage.YCOMMENT:
				sequence_YComment(context, (YComment) semanticObject); 
				return; 
			case YammPackage.YCOMPOSITE_EDGE:
				sequence_YCompositeEdge(context, (YCompositeEdge) semanticObject); 
				return; 
			case YammPackage.YCONSTRAINT:
				sequence_YConstraint(context, (YConstraint) semanticObject); 
				return; 
			case YammPackage.YCREATE_INSTANCE_EXPRESSION:
				sequence_YCreateInstanceExpression(context, (YCreateInstanceExpression) semanticObject); 
				return; 
			case YammPackage.YEFFECT:
				sequence_YEffect(context, (YEffect) semanticObject); 
				return; 
			case YammPackage.YELEMENT_IMPORT:
				sequence_YElementImport(context, (YElementImport) semanticObject); 
				return; 
			case YammPackage.YENUMERATION:
				sequence_YEnumeration(context, (YEnumeration) semanticObject); 
				return; 
			case YammPackage.YENUMERATION_LITERAL:
				sequence_YEnumerationLiteral(context, (YEnumerationLiteral) semanticObject); 
				return; 
			case YammPackage.YFEATURE_CALL:
				sequence_XFeatureCall(context, (YFeatureCall) semanticObject); 
				return; 
			case YammPackage.YFINAL_STATE:
				sequence_YFinalState(context, (YFinalState) semanticObject); 
				return; 
			case YammPackage.YGET_INSTANCES:
				sequence_YGetInstances(context, (YGetInstances) semanticObject); 
				return; 
			case YammPackage.YGET_INSTANCES_OF_EXPRESSION:
				sequence_YGetInstancesOfExpression(context, (YGetInstancesOfExpression) semanticObject); 
				return; 
			case YammPackage.YGET_LAYER_INFORMATION:
				sequence_YGetLayerInformation(context, (YGetLayerInformation) semanticObject); 
				return; 
			case YammPackage.YGET_OBJECT_MANAGEMENT:
				sequence_YGetObjectManagement(context, (YGetObjectManagement) semanticObject); 
				return; 
			case YammPackage.YLOAD_MODEL:
				sequence_YLoadModel(context, (YLoadModel) semanticObject); 
				return; 
			case YammPackage.YMEMBER_FEATURE_CALL:
				sequence_XMemberFeatureCall(context, (YMemberFeatureCall) semanticObject); 
				return; 
			case YammPackage.YMODEL:
				sequence_YModel(context, (YModel) semanticObject); 
				return; 
			case YammPackage.YOBSERVER_ADD_VALUE:
				sequence_YObserverAddValue(context, (YObserverAddValue) semanticObject); 
				return; 
			case YammPackage.YOPERATION:
				sequence_YOperation(context, (YOperation) semanticObject); 
				return; 
			case YammPackage.YPACKAGE:
				sequence_YPackage(context, (YPackage) semanticObject); 
				return; 
			case YammPackage.YPACKAGE_IMPORT:
				sequence_YPackageImport(context, (YPackageImport) semanticObject); 
				return; 
			case YammPackage.YPARAMETER:
				sequence_YParameter(context, (YParameter) semanticObject); 
				return; 
			case YammPackage.YPRIMITIVE_TYPE:
				sequence_YPrimitiveType(context, (YPrimitiveType) semanticObject); 
				return; 
			case YammPackage.YPRINT_EXPRESSION:
				sequence_YPrintExpression(context, (YPrintExpression) semanticObject); 
				return; 
			case YammPackage.YPROPERTY:
				sequence_YProperty(context, (YProperty) semanticObject); 
				return; 
			case YammPackage.YPSEUDOSTATE:
				sequence_YPseudostate(context, (YPseudostate) semanticObject); 
				return; 
			case YammPackage.YSET_RETURN_VALUE:
				sequence_YSetReturnValue(context, (YSetReturnValue) semanticObject); 
				return; 
			case YammPackage.YSHARED_EDGE:
				sequence_YSharedEdge(context, (YSharedEdge) semanticObject); 
				return; 
			case YammPackage.YSTATE:
				sequence_YState(context, (YState) semanticObject); 
				return; 
			case YammPackage.YSTATE_MACHINE:
				sequence_YStateMachine(context, (YStateMachine) semanticObject); 
				return; 
			case YammPackage.YTIME_STEP:
				sequence_YTimeStep(context, (YTimeStep) semanticObject); 
				return; 
			case YammPackage.YTR_ATTACHMENT:
				sequence_YTrAttachment(context, (YTrAttachment) semanticObject); 
				return; 
			case YammPackage.YTRANSITION:
				sequence_YTransition(context, (YTransition) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     EObject returns EObject
	 *
	 * Constraint:
	 *     {EObject}
	 */
	protected void sequence_EObject(ISerializationContext context, EObject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XMemberFeatureCall returns XBinaryOperation
	 *     XMemberFeatureCall.XAssignment_1_0_0_0_0 returns XBinaryOperation
	 *     XMemberFeatureCall.YMemberFeatureCall_1_1_0_0_0 returns XBinaryOperation
	 *     XPrimaryExpression returns XBinaryOperation
	 *     XAssignment returns XBinaryOperation
	 *     XAssignment.XBinaryOperation_3_1_0_0_0 returns XBinaryOperation
	 *     XExpression returns XBinaryOperation
	 *     XOrExpression returns XBinaryOperation
	 *     XOrExpression.XBinaryOperation_1_0_0_0 returns XBinaryOperation
	 *     XAndExpression returns XBinaryOperation
	 *     XAndExpression.XBinaryOperation_1_0_0_0 returns XBinaryOperation
	 *     XEqualityExpression returns XBinaryOperation
	 *     XEqualityExpression.XBinaryOperation_1_0_0_0 returns XBinaryOperation
	 *     XRelationalExpression returns XBinaryOperation
	 *     XRelationalExpression.XInstanceOfExpression_1_0_0_0_0 returns XBinaryOperation
	 *     XRelationalExpression.XBinaryOperation_1_1_0_0_0 returns XBinaryOperation
	 *     XOtherOperatorExpression returns XBinaryOperation
	 *     XOtherOperatorExpression.XBinaryOperation_1_0_0_0 returns XBinaryOperation
	 *     XAdditiveExpression returns XBinaryOperation
	 *     XAdditiveExpression.XBinaryOperation_1_0_0_0 returns XBinaryOperation
	 *     XMultiplicativeExpression returns XBinaryOperation
	 *     XMultiplicativeExpression.XBinaryOperation_1_0_0_0 returns XBinaryOperation
	 *     XUnaryOperation returns XBinaryOperation
	 *     XCastedExpression returns XBinaryOperation
	 *     XCastedExpression.XCastedExpression_1_0_0_0 returns XBinaryOperation
	 *     XPostfixOperation returns XBinaryOperation
	 *     XPostfixOperation.XPostfixOperation_1_0_0 returns XBinaryOperation
	 *     XParenthesizedExpression returns XBinaryOperation
	 *     XExpressionOrVarDeclaration returns XBinaryOperation
	 *
	 * Constraint:
	 *     (
	 *         (leftOperand=XAssignment_XBinaryOperation_3_1_0_0_0 feature=[JvmIdentifiableElement|OpMultiAssign] rightOperand=XAssignment) | 
	 *         (leftOperand=XOrExpression_XBinaryOperation_1_0_0_0 feature=[JvmIdentifiableElement|OpOr] rightOperand=XAndExpression) | 
	 *         (leftOperand=XAndExpression_XBinaryOperation_1_0_0_0 feature=[JvmIdentifiableElement|OpAnd] rightOperand=XEqualityExpression) | 
	 *         (leftOperand=XEqualityExpression_XBinaryOperation_1_0_0_0 feature=[JvmIdentifiableElement|OpEquality] rightOperand=XRelationalExpression) | 
	 *         (leftOperand=XRelationalExpression_XBinaryOperation_1_1_0_0_0 feature=[JvmIdentifiableElement|OpCompare] rightOperand=XOtherOperatorExpression) | 
	 *         (leftOperand=XOtherOperatorExpression_XBinaryOperation_1_0_0_0 feature=[JvmIdentifiableElement|OpOther] rightOperand=XAdditiveExpression) | 
	 *         (leftOperand=XAdditiveExpression_XBinaryOperation_1_0_0_0 feature=[JvmIdentifiableElement|OpAdd] rightOperand=XMultiplicativeExpression) | 
	 *         (leftOperand=XMultiplicativeExpression_XBinaryOperation_1_0_0_0 feature=[JvmIdentifiableElement|OpMulti] rightOperand=XUnaryOperation)
	 *     )
	 */
	protected void sequence_XAdditiveExpression_XAndExpression_XAssignment_XEqualityExpression_XMultiplicativeExpression_XOrExpression_XOtherOperatorExpression_XRelationalExpression(ISerializationContext context, XBinaryOperation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XMemberFeatureCall returns XAssignment
	 *     XMemberFeatureCall.XAssignment_1_0_0_0_0 returns XAssignment
	 *     XMemberFeatureCall.YMemberFeatureCall_1_1_0_0_0 returns XAssignment
	 *     XPrimaryExpression returns XAssignment
	 *     XAssignment returns XAssignment
	 *     XAssignment.XBinaryOperation_3_1_0_0_0 returns XAssignment
	 *     XExpression returns XAssignment
	 *     XOrExpression returns XAssignment
	 *     XOrExpression.XBinaryOperation_1_0_0_0 returns XAssignment
	 *     XAndExpression returns XAssignment
	 *     XAndExpression.XBinaryOperation_1_0_0_0 returns XAssignment
	 *     XEqualityExpression returns XAssignment
	 *     XEqualityExpression.XBinaryOperation_1_0_0_0 returns XAssignment
	 *     XRelationalExpression returns XAssignment
	 *     XRelationalExpression.XInstanceOfExpression_1_0_0_0_0 returns XAssignment
	 *     XRelationalExpression.XBinaryOperation_1_1_0_0_0 returns XAssignment
	 *     XOtherOperatorExpression returns XAssignment
	 *     XOtherOperatorExpression.XBinaryOperation_1_0_0_0 returns XAssignment
	 *     XAdditiveExpression returns XAssignment
	 *     XAdditiveExpression.XBinaryOperation_1_0_0_0 returns XAssignment
	 *     XMultiplicativeExpression returns XAssignment
	 *     XMultiplicativeExpression.XBinaryOperation_1_0_0_0 returns XAssignment
	 *     XUnaryOperation returns XAssignment
	 *     XCastedExpression returns XAssignment
	 *     XCastedExpression.XCastedExpression_1_0_0_0 returns XAssignment
	 *     XPostfixOperation returns XAssignment
	 *     XPostfixOperation.XPostfixOperation_1_0_0 returns XAssignment
	 *     XParenthesizedExpression returns XAssignment
	 *     XExpressionOrVarDeclaration returns XAssignment
	 *
	 * Constraint:
	 *     (
	 *         (assignable=XMemberFeatureCall_XAssignment_1_0_0_0_0 feature=[JvmIdentifiableElement|FeatureCallID] value=XAssignment) | 
	 *         (feature=[JvmIdentifiableElement|FeatureCallID] value=XAssignment)
	 *     )
	 */
	protected void sequence_XAssignment_XMemberFeatureCall(ISerializationContext context, XAssignment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XBlockExpression returns XBlockExpression
	 *     XMemberFeatureCall returns XBlockExpression
	 *     XMemberFeatureCall.XAssignment_1_0_0_0_0 returns XBlockExpression
	 *     XMemberFeatureCall.YMemberFeatureCall_1_1_0_0_0 returns XBlockExpression
	 *     XPrimaryExpression returns XBlockExpression
	 *     XAssignment returns XBlockExpression
	 *     XAssignment.XBinaryOperation_3_1_0_0_0 returns XBlockExpression
	 *     XExpression returns XBlockExpression
	 *     XOrExpression returns XBlockExpression
	 *     XOrExpression.XBinaryOperation_1_0_0_0 returns XBlockExpression
	 *     XAndExpression returns XBlockExpression
	 *     XAndExpression.XBinaryOperation_1_0_0_0 returns XBlockExpression
	 *     XEqualityExpression returns XBlockExpression
	 *     XEqualityExpression.XBinaryOperation_1_0_0_0 returns XBlockExpression
	 *     XRelationalExpression returns XBlockExpression
	 *     XRelationalExpression.XInstanceOfExpression_1_0_0_0_0 returns XBlockExpression
	 *     XRelationalExpression.XBinaryOperation_1_1_0_0_0 returns XBlockExpression
	 *     XOtherOperatorExpression returns XBlockExpression
	 *     XOtherOperatorExpression.XBinaryOperation_1_0_0_0 returns XBlockExpression
	 *     XAdditiveExpression returns XBlockExpression
	 *     XAdditiveExpression.XBinaryOperation_1_0_0_0 returns XBlockExpression
	 *     XMultiplicativeExpression returns XBlockExpression
	 *     XMultiplicativeExpression.XBinaryOperation_1_0_0_0 returns XBlockExpression
	 *     XUnaryOperation returns XBlockExpression
	 *     XCastedExpression returns XBlockExpression
	 *     XCastedExpression.XCastedExpression_1_0_0_0 returns XBlockExpression
	 *     XPostfixOperation returns XBlockExpression
	 *     XPostfixOperation.XPostfixOperation_1_0_0 returns XBlockExpression
	 *     XParenthesizedExpression returns XBlockExpression
	 *     XExpressionOrVarDeclaration returns XBlockExpression
	 *
	 * Constraint:
	 *     expressions+=XExpression*
	 */
	protected void sequence_XBlockExpression(ISerializationContext context, XBlockExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XFeatureCall returns YFeatureCall
	 *     XMemberFeatureCall returns YFeatureCall
	 *     XMemberFeatureCall.XAssignment_1_0_0_0_0 returns YFeatureCall
	 *     XMemberFeatureCall.YMemberFeatureCall_1_1_0_0_0 returns YFeatureCall
	 *     XPrimaryExpression returns YFeatureCall
	 *     XAssignment returns YFeatureCall
	 *     XAssignment.XBinaryOperation_3_1_0_0_0 returns YFeatureCall
	 *     XExpression returns YFeatureCall
	 *     XOrExpression returns YFeatureCall
	 *     XOrExpression.XBinaryOperation_1_0_0_0 returns YFeatureCall
	 *     XAndExpression returns YFeatureCall
	 *     XAndExpression.XBinaryOperation_1_0_0_0 returns YFeatureCall
	 *     XEqualityExpression returns YFeatureCall
	 *     XEqualityExpression.XBinaryOperation_1_0_0_0 returns YFeatureCall
	 *     XRelationalExpression returns YFeatureCall
	 *     XRelationalExpression.XInstanceOfExpression_1_0_0_0_0 returns YFeatureCall
	 *     XRelationalExpression.XBinaryOperation_1_1_0_0_0 returns YFeatureCall
	 *     XOtherOperatorExpression returns YFeatureCall
	 *     XOtherOperatorExpression.XBinaryOperation_1_0_0_0 returns YFeatureCall
	 *     XAdditiveExpression returns YFeatureCall
	 *     XAdditiveExpression.XBinaryOperation_1_0_0_0 returns YFeatureCall
	 *     XMultiplicativeExpression returns YFeatureCall
	 *     XMultiplicativeExpression.XBinaryOperation_1_0_0_0 returns YFeatureCall
	 *     XUnaryOperation returns YFeatureCall
	 *     XCastedExpression returns YFeatureCall
	 *     XCastedExpression.XCastedExpression_1_0_0_0 returns YFeatureCall
	 *     XPostfixOperation returns YFeatureCall
	 *     XPostfixOperation.XPostfixOperation_1_0_0 returns YFeatureCall
	 *     XParenthesizedExpression returns YFeatureCall
	 *     XExpressionOrVarDeclaration returns YFeatureCall
	 *
	 * Constraint:
	 *     (
	 *         feature=[JvmIdentifiableElement|IdOrSuper] 
	 *         (
	 *             explicitOperationCall?='(' 
	 *             (featureCallArguments+=XExpression featureCallArguments+=XExpression*)? 
	 *             (explicitInheritanceType?='[' inheritanceType=[JvmGenericType|EString2])?
	 *         )?
	 *     )
	 */
	protected void sequence_XFeatureCall(ISerializationContext context, YFeatureCall semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XMemberFeatureCall returns YMemberFeatureCall
	 *     XMemberFeatureCall.XAssignment_1_0_0_0_0 returns YMemberFeatureCall
	 *     XMemberFeatureCall.YMemberFeatureCall_1_1_0_0_0 returns YMemberFeatureCall
	 *     XPrimaryExpression returns YMemberFeatureCall
	 *     XAssignment returns YMemberFeatureCall
	 *     XAssignment.XBinaryOperation_3_1_0_0_0 returns YMemberFeatureCall
	 *     XExpression returns YMemberFeatureCall
	 *     XOrExpression returns YMemberFeatureCall
	 *     XOrExpression.XBinaryOperation_1_0_0_0 returns YMemberFeatureCall
	 *     XAndExpression returns YMemberFeatureCall
	 *     XAndExpression.XBinaryOperation_1_0_0_0 returns YMemberFeatureCall
	 *     XEqualityExpression returns YMemberFeatureCall
	 *     XEqualityExpression.XBinaryOperation_1_0_0_0 returns YMemberFeatureCall
	 *     XRelationalExpression returns YMemberFeatureCall
	 *     XRelationalExpression.XInstanceOfExpression_1_0_0_0_0 returns YMemberFeatureCall
	 *     XRelationalExpression.XBinaryOperation_1_1_0_0_0 returns YMemberFeatureCall
	 *     XOtherOperatorExpression returns YMemberFeatureCall
	 *     XOtherOperatorExpression.XBinaryOperation_1_0_0_0 returns YMemberFeatureCall
	 *     XAdditiveExpression returns YMemberFeatureCall
	 *     XAdditiveExpression.XBinaryOperation_1_0_0_0 returns YMemberFeatureCall
	 *     XMultiplicativeExpression returns YMemberFeatureCall
	 *     XMultiplicativeExpression.XBinaryOperation_1_0_0_0 returns YMemberFeatureCall
	 *     XUnaryOperation returns YMemberFeatureCall
	 *     XCastedExpression returns YMemberFeatureCall
	 *     XCastedExpression.XCastedExpression_1_0_0_0 returns YMemberFeatureCall
	 *     XPostfixOperation returns YMemberFeatureCall
	 *     XPostfixOperation.XPostfixOperation_1_0_0 returns YMemberFeatureCall
	 *     XParenthesizedExpression returns YMemberFeatureCall
	 *     XExpressionOrVarDeclaration returns YMemberFeatureCall
	 *
	 * Constraint:
	 *     (
	 *         memberCallTarget=XMemberFeatureCall_YMemberFeatureCall_1_1_0_0_0 
	 *         feature=[JvmIdentifiableElement|IdOrSuper] 
	 *         (
	 *             explicitOperationCall?='(' 
	 *             (memberCallArguments+=XExpression memberCallArguments+=XExpression*)? 
	 *             (explicitInheritanceType?='[' inheritanceType=[JvmGenericType|EString2])?
	 *         )?
	 *     )
	 */
	protected void sequence_XMemberFeatureCall(ISerializationContext context, YMemberFeatureCall semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     YElement returns YClass
	 *     YNamedElement returns YClass
	 *     YPackageableElement returns YClass
	 *     YClassifier returns YClass
	 *     YType returns YClass
	 *     YNamespace returns YClass
	 *     YClass returns YClass
	 *
	 * Constraint:
	 *     (
	 *         isAbstract?='yIsAbstract'? 
	 *         ObjectID=EString 
	 *         name=EString? 
	 *         qualifiedName=EString2? 
	 *         observeQueue?='yObserveQueue'? 
	 *         package=[YNamedElement|EString2]? 
	 *         (superClass+=[YClass|EString2] superClass+=[YClass|EString2]*)? 
	 *         (ownedAttribute+=YProperty ownedAttribute+=YProperty*)? 
	 *         (ownedOperation+=YOperation ownedOperation+=YOperation*)?
	 *     )
	 */
	protected void sequence_YClass(ISerializationContext context, YClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XMemberFeatureCall returns YColorDFAObject
	 *     XMemberFeatureCall.XAssignment_1_0_0_0_0 returns YColorDFAObject
	 *     XMemberFeatureCall.YMemberFeatureCall_1_1_0_0_0 returns YColorDFAObject
	 *     XPrimaryExpression returns YColorDFAObject
	 *     XAssignment returns YColorDFAObject
	 *     XAssignment.XBinaryOperation_3_1_0_0_0 returns YColorDFAObject
	 *     YColorDFAObject returns YColorDFAObject
	 *     XExpression returns YColorDFAObject
	 *     XOrExpression returns YColorDFAObject
	 *     XOrExpression.XBinaryOperation_1_0_0_0 returns YColorDFAObject
	 *     XAndExpression returns YColorDFAObject
	 *     XAndExpression.XBinaryOperation_1_0_0_0 returns YColorDFAObject
	 *     XEqualityExpression returns YColorDFAObject
	 *     XEqualityExpression.XBinaryOperation_1_0_0_0 returns YColorDFAObject
	 *     XRelationalExpression returns YColorDFAObject
	 *     XRelationalExpression.XInstanceOfExpression_1_0_0_0_0 returns YColorDFAObject
	 *     XRelationalExpression.XBinaryOperation_1_1_0_0_0 returns YColorDFAObject
	 *     XOtherOperatorExpression returns YColorDFAObject
	 *     XOtherOperatorExpression.XBinaryOperation_1_0_0_0 returns YColorDFAObject
	 *     XAdditiveExpression returns YColorDFAObject
	 *     XAdditiveExpression.XBinaryOperation_1_0_0_0 returns YColorDFAObject
	 *     XMultiplicativeExpression returns YColorDFAObject
	 *     XMultiplicativeExpression.XBinaryOperation_1_0_0_0 returns YColorDFAObject
	 *     XUnaryOperation returns YColorDFAObject
	 *     XCastedExpression returns YColorDFAObject
	 *     XCastedExpression.XCastedExpression_1_0_0_0 returns YColorDFAObject
	 *     XPostfixOperation returns YColorDFAObject
	 *     XPostfixOperation.XPostfixOperation_1_0_0 returns YColorDFAObject
	 *     XParenthesizedExpression returns YColorDFAObject
	 *     XExpressionOrVarDeclaration returns YColorDFAObject
	 *
	 * Constraint:
	 *     id=XExpression
	 */
	protected void sequence_YColorDFAObject(ISerializationContext context, YColorDFAObject semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, YammPackage.Literals.YCOLOR_DFA_OBJECT__ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, YammPackage.Literals.YCOLOR_DFA_OBJECT__ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getYColorDFAObjectAccess().getIdXExpressionParserRuleCall_1_0(), semanticObject.getId());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     YElement returns YComment
	 *     YComment returns YComment
	 *
	 * Constraint:
	 *     (
	 *         ObjectID=EString 
	 *         body=EString 
	 *         (annotatedElement+=[YElement|EString] annotatedElement+=[YElement|EString]*)? 
	 *         ownedComment=YComment? 
	 *         (ownedElement+=YElement ownedElement+=YElement*)?
	 *     )
	 */
	protected void sequence_YComment(ISerializationContext context, YComment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     YCompositeEdge returns YCompositeEdge
	 *
	 * Constraint:
	 *     (ObjectID=EString description=EString? source=[YClass|EString] target=[YClass|EString])
	 */
	protected void sequence_YCompositeEdge(ISerializationContext context, YCompositeEdge semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     YElement returns YConstraint
	 *     YNamedElement returns YConstraint
	 *     YPackageableElement returns YConstraint
	 *     YConstraint returns YConstraint
	 *
	 * Constraint:
	 *     (
	 *         ObjectID=EString 
	 *         name=EString? 
	 *         qualifiedName=EString? 
	 *         (constrainedElement+=[YElement|EString] constrainedElement+=[YElement|EString]*)? 
	 *         ownedComment=YComment? 
	 *         (ownedElement+=YElement ownedElement+=YElement*)? 
	 *         specification=YOperation?
	 *     )
	 */
	protected void sequence_YConstraint(ISerializationContext context, YConstraint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XMemberFeatureCall returns YCreateInstanceExpression
	 *     XMemberFeatureCall.XAssignment_1_0_0_0_0 returns YCreateInstanceExpression
	 *     XMemberFeatureCall.YMemberFeatureCall_1_1_0_0_0 returns YCreateInstanceExpression
	 *     XPrimaryExpression returns YCreateInstanceExpression
	 *     XAssignment returns YCreateInstanceExpression
	 *     XAssignment.XBinaryOperation_3_1_0_0_0 returns YCreateInstanceExpression
	 *     YCreateInstanceExpression returns YCreateInstanceExpression
	 *     XExpression returns YCreateInstanceExpression
	 *     XOrExpression returns YCreateInstanceExpression
	 *     XOrExpression.XBinaryOperation_1_0_0_0 returns YCreateInstanceExpression
	 *     XAndExpression returns YCreateInstanceExpression
	 *     XAndExpression.XBinaryOperation_1_0_0_0 returns YCreateInstanceExpression
	 *     XEqualityExpression returns YCreateInstanceExpression
	 *     XEqualityExpression.XBinaryOperation_1_0_0_0 returns YCreateInstanceExpression
	 *     XRelationalExpression returns YCreateInstanceExpression
	 *     XRelationalExpression.XInstanceOfExpression_1_0_0_0_0 returns YCreateInstanceExpression
	 *     XRelationalExpression.XBinaryOperation_1_1_0_0_0 returns YCreateInstanceExpression
	 *     XOtherOperatorExpression returns YCreateInstanceExpression
	 *     XOtherOperatorExpression.XBinaryOperation_1_0_0_0 returns YCreateInstanceExpression
	 *     XAdditiveExpression returns YCreateInstanceExpression
	 *     XAdditiveExpression.XBinaryOperation_1_0_0_0 returns YCreateInstanceExpression
	 *     XMultiplicativeExpression returns YCreateInstanceExpression
	 *     XMultiplicativeExpression.XBinaryOperation_1_0_0_0 returns YCreateInstanceExpression
	 *     XUnaryOperation returns YCreateInstanceExpression
	 *     XCastedExpression returns YCreateInstanceExpression
	 *     XCastedExpression.XCastedExpression_1_0_0_0 returns YCreateInstanceExpression
	 *     XPostfixOperation returns YCreateInstanceExpression
	 *     XPostfixOperation.XPostfixOperation_1_0_0 returns YCreateInstanceExpression
	 *     XParenthesizedExpression returns YCreateInstanceExpression
	 *     XExpressionOrVarDeclaration returns YCreateInstanceExpression
	 *
	 * Constraint:
	 *     clazz=[YClass|EString2]
	 */
	protected void sequence_YCreateInstanceExpression(ISerializationContext context, YCreateInstanceExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, YammPackage.Literals.YCREATE_INSTANCE_EXPRESSION__CLAZZ) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, YammPackage.Literals.YCREATE_INSTANCE_EXPRESSION__CLAZZ));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getYCreateInstanceExpressionAccess().getClazzYClassEString2ParserRuleCall_1_0_1(), semanticObject.eGet(YammPackage.Literals.YCREATE_INSTANCE_EXPRESSION__CLAZZ, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     YEffect returns YEffect
	 *
	 * Constraint:
	 *     (breakpoint?='yBreakpoint'? ObjectID=EString body=XBlockExpression?)
	 */
	protected void sequence_YEffect(ISerializationContext context, YEffect semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     YElement returns YElementImport
	 *     YElementImport returns YElementImport
	 *
	 * Constraint:
	 *     (
	 *         ObjectID=EString 
	 *         importedElement=[YPackageableElement|EString] 
	 *         importingNamespace=[YNamespace|EString] 
	 *         ownedComment=YComment? 
	 *         (ownedElement+=YElement ownedElement+=YElement*)?
	 *     )
	 */
	protected void sequence_YElementImport(ISerializationContext context, YElementImport semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     YElement returns YEnumerationLiteral
	 *     YNamedElement returns YEnumerationLiteral
	 *     YPackageableElement returns YEnumerationLiteral
	 *     YEnumerationLiteral returns YEnumerationLiteral
	 *
	 * Constraint:
	 *     (ObjectID=EString name=EString? qualifiedName=EString? ownedComment=YComment? (ownedElement+=YElement ownedElement+=YElement*)?)
	 */
	protected void sequence_YEnumerationLiteral(ISerializationContext context, YEnumerationLiteral semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     YElement returns YEnumeration
	 *     YNamedElement returns YEnumeration
	 *     YPackageableElement returns YEnumeration
	 *     YClassifier returns YEnumeration
	 *     YType returns YEnumeration
	 *     YNamespace returns YEnumeration
	 *     YEnumeration returns YEnumeration
	 *
	 * Constraint:
	 *     (
	 *         isAbstract?='yIsAbstract'? 
	 *         ObjectID=EString 
	 *         name=EString? 
	 *         qualifiedName=EString2? 
	 *         (member+=[YNamedElement|EString] member+=[YNamedElement|EString]*)? 
	 *         (elementImport+=[YPackageableElement|EString] elementImport+=[YPackageableElement|EString]*)? 
	 *         (importedMember+=[YPackageableElement|EString] importedMember+=[YPackageableElement|EString]*)? 
	 *         (packageImport+=[YPackageableElement|EString] packageImport+=[YPackageableElement|EString]*)? 
	 *         (attribute+=[YProperty|EString] attribute+=[YProperty|EString]*)? 
	 *         (feature+=[YFeature|EString] feature+=[YFeature|EString]*)? 
	 *         (general+=[YClassifier|EString] general+=[YClassifier|EString]*)? 
	 *         (inheritedMember+=[YNamedElement|EString] inheritedMember+=[YNamedElement|EString]*)? 
	 *         package=[YNamedElement|EString]? 
	 *         ownedComment=YComment? 
	 *         (ownedElement+=YElement ownedElement+=YElement*)? 
	 *         (ownedMember+=YNamedElement ownedMember+=YNamedElement*)? 
	 *         (ownedRule+=YConstraint ownedRule+=YConstraint*)? 
	 *         (ownedLiteral+=YEnumerationLiteral ownedLiteral+=YEnumerationLiteral*)?
	 *     )
	 */
	protected void sequence_YEnumeration(ISerializationContext context, YEnumeration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     YElement returns YFinalState
	 *     YNamedElement returns YFinalState
	 *     YVertex returns YFinalState
	 *     YFinalState returns YFinalState
	 *
	 * Constraint:
	 *     (
	 *         ObjectID=EString 
	 *         name=EString? 
	 *         qualifiedName=EString? 
	 *         (outgoing+=[YTransition|EString] outgoing+=[YTransition|EString]*)? 
	 *         (incoming+=[YTransition|EString] incoming+=[YTransition|EString]*)?
	 *     )
	 */
	protected void sequence_YFinalState(ISerializationContext context, YFinalState semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XMemberFeatureCall returns YGetInstancesOfExpression
	 *     XMemberFeatureCall.XAssignment_1_0_0_0_0 returns YGetInstancesOfExpression
	 *     XMemberFeatureCall.YMemberFeatureCall_1_1_0_0_0 returns YGetInstancesOfExpression
	 *     XPrimaryExpression returns YGetInstancesOfExpression
	 *     XAssignment returns YGetInstancesOfExpression
	 *     XAssignment.XBinaryOperation_3_1_0_0_0 returns YGetInstancesOfExpression
	 *     YGetInstancesOfExpression returns YGetInstancesOfExpression
	 *     XExpression returns YGetInstancesOfExpression
	 *     XOrExpression returns YGetInstancesOfExpression
	 *     XOrExpression.XBinaryOperation_1_0_0_0 returns YGetInstancesOfExpression
	 *     XAndExpression returns YGetInstancesOfExpression
	 *     XAndExpression.XBinaryOperation_1_0_0_0 returns YGetInstancesOfExpression
	 *     XEqualityExpression returns YGetInstancesOfExpression
	 *     XEqualityExpression.XBinaryOperation_1_0_0_0 returns YGetInstancesOfExpression
	 *     XRelationalExpression returns YGetInstancesOfExpression
	 *     XRelationalExpression.XInstanceOfExpression_1_0_0_0_0 returns YGetInstancesOfExpression
	 *     XRelationalExpression.XBinaryOperation_1_1_0_0_0 returns YGetInstancesOfExpression
	 *     XOtherOperatorExpression returns YGetInstancesOfExpression
	 *     XOtherOperatorExpression.XBinaryOperation_1_0_0_0 returns YGetInstancesOfExpression
	 *     XAdditiveExpression returns YGetInstancesOfExpression
	 *     XAdditiveExpression.XBinaryOperation_1_0_0_0 returns YGetInstancesOfExpression
	 *     XMultiplicativeExpression returns YGetInstancesOfExpression
	 *     XMultiplicativeExpression.XBinaryOperation_1_0_0_0 returns YGetInstancesOfExpression
	 *     XUnaryOperation returns YGetInstancesOfExpression
	 *     XCastedExpression returns YGetInstancesOfExpression
	 *     XCastedExpression.XCastedExpression_1_0_0_0 returns YGetInstancesOfExpression
	 *     XPostfixOperation returns YGetInstancesOfExpression
	 *     XPostfixOperation.XPostfixOperation_1_0_0 returns YGetInstancesOfExpression
	 *     XParenthesizedExpression returns YGetInstancesOfExpression
	 *     XExpressionOrVarDeclaration returns YGetInstancesOfExpression
	 *
	 * Constraint:
	 *     clazz=[YClass|EString2]
	 */
	protected void sequence_YGetInstancesOfExpression(ISerializationContext context, YGetInstancesOfExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, YammPackage.Literals.YGET_INSTANCES_OF_EXPRESSION__CLAZZ) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, YammPackage.Literals.YGET_INSTANCES_OF_EXPRESSION__CLAZZ));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getYGetInstancesOfExpressionAccess().getClazzYClassEString2ParserRuleCall_2_0_1(), semanticObject.eGet(YammPackage.Literals.YGET_INSTANCES_OF_EXPRESSION__CLAZZ, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     XMemberFeatureCall returns YGetInstances
	 *     XMemberFeatureCall.XAssignment_1_0_0_0_0 returns YGetInstances
	 *     XMemberFeatureCall.YMemberFeatureCall_1_1_0_0_0 returns YGetInstances
	 *     XPrimaryExpression returns YGetInstances
	 *     XAssignment returns YGetInstances
	 *     XAssignment.XBinaryOperation_3_1_0_0_0 returns YGetInstances
	 *     YGetInstances returns YGetInstances
	 *     XExpression returns YGetInstances
	 *     XOrExpression returns YGetInstances
	 *     XOrExpression.XBinaryOperation_1_0_0_0 returns YGetInstances
	 *     XAndExpression returns YGetInstances
	 *     XAndExpression.XBinaryOperation_1_0_0_0 returns YGetInstances
	 *     XEqualityExpression returns YGetInstances
	 *     XEqualityExpression.XBinaryOperation_1_0_0_0 returns YGetInstances
	 *     XRelationalExpression returns YGetInstances
	 *     XRelationalExpression.XInstanceOfExpression_1_0_0_0_0 returns YGetInstances
	 *     XRelationalExpression.XBinaryOperation_1_1_0_0_0 returns YGetInstances
	 *     XOtherOperatorExpression returns YGetInstances
	 *     XOtherOperatorExpression.XBinaryOperation_1_0_0_0 returns YGetInstances
	 *     XAdditiveExpression returns YGetInstances
	 *     XAdditiveExpression.XBinaryOperation_1_0_0_0 returns YGetInstances
	 *     XMultiplicativeExpression returns YGetInstances
	 *     XMultiplicativeExpression.XBinaryOperation_1_0_0_0 returns YGetInstances
	 *     XUnaryOperation returns YGetInstances
	 *     XCastedExpression returns YGetInstances
	 *     XCastedExpression.XCastedExpression_1_0_0_0 returns YGetInstances
	 *     XPostfixOperation returns YGetInstances
	 *     XPostfixOperation.XPostfixOperation_1_0_0 returns YGetInstances
	 *     XParenthesizedExpression returns YGetInstances
	 *     XExpressionOrVarDeclaration returns YGetInstances
	 *
	 * Constraint:
	 *     (parameter+=XExpression parameter+=XExpression*)
	 */
	protected void sequence_YGetInstances(ISerializationContext context, YGetInstances semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XMemberFeatureCall returns YGetLayerInformation
	 *     XMemberFeatureCall.XAssignment_1_0_0_0_0 returns YGetLayerInformation
	 *     XMemberFeatureCall.YMemberFeatureCall_1_1_0_0_0 returns YGetLayerInformation
	 *     XPrimaryExpression returns YGetLayerInformation
	 *     XAssignment returns YGetLayerInformation
	 *     XAssignment.XBinaryOperation_3_1_0_0_0 returns YGetLayerInformation
	 *     YGetLayerInformation returns YGetLayerInformation
	 *     XExpression returns YGetLayerInformation
	 *     XOrExpression returns YGetLayerInformation
	 *     XOrExpression.XBinaryOperation_1_0_0_0 returns YGetLayerInformation
	 *     XAndExpression returns YGetLayerInformation
	 *     XAndExpression.XBinaryOperation_1_0_0_0 returns YGetLayerInformation
	 *     XEqualityExpression returns YGetLayerInformation
	 *     XEqualityExpression.XBinaryOperation_1_0_0_0 returns YGetLayerInformation
	 *     XRelationalExpression returns YGetLayerInformation
	 *     XRelationalExpression.XInstanceOfExpression_1_0_0_0_0 returns YGetLayerInformation
	 *     XRelationalExpression.XBinaryOperation_1_1_0_0_0 returns YGetLayerInformation
	 *     XOtherOperatorExpression returns YGetLayerInformation
	 *     XOtherOperatorExpression.XBinaryOperation_1_0_0_0 returns YGetLayerInformation
	 *     XAdditiveExpression returns YGetLayerInformation
	 *     XAdditiveExpression.XBinaryOperation_1_0_0_0 returns YGetLayerInformation
	 *     XMultiplicativeExpression returns YGetLayerInformation
	 *     XMultiplicativeExpression.XBinaryOperation_1_0_0_0 returns YGetLayerInformation
	 *     XUnaryOperation returns YGetLayerInformation
	 *     XCastedExpression returns YGetLayerInformation
	 *     XCastedExpression.XCastedExpression_1_0_0_0 returns YGetLayerInformation
	 *     XPostfixOperation returns YGetLayerInformation
	 *     XPostfixOperation.XPostfixOperation_1_0_0 returns YGetLayerInformation
	 *     XParenthesizedExpression returns YGetLayerInformation
	 *     XExpressionOrVarDeclaration returns YGetLayerInformation
	 *
	 * Constraint:
	 *     (parameter+=XExpression parameter+=XExpression*)?
	 */
	protected void sequence_YGetLayerInformation(ISerializationContext context, YGetLayerInformation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XMemberFeatureCall returns YGetObjectManagement
	 *     XMemberFeatureCall.XAssignment_1_0_0_0_0 returns YGetObjectManagement
	 *     XMemberFeatureCall.YMemberFeatureCall_1_1_0_0_0 returns YGetObjectManagement
	 *     XPrimaryExpression returns YGetObjectManagement
	 *     XAssignment returns YGetObjectManagement
	 *     XAssignment.XBinaryOperation_3_1_0_0_0 returns YGetObjectManagement
	 *     YGetObjectManagement returns YGetObjectManagement
	 *     XExpression returns YGetObjectManagement
	 *     XOrExpression returns YGetObjectManagement
	 *     XOrExpression.XBinaryOperation_1_0_0_0 returns YGetObjectManagement
	 *     XAndExpression returns YGetObjectManagement
	 *     XAndExpression.XBinaryOperation_1_0_0_0 returns YGetObjectManagement
	 *     XEqualityExpression returns YGetObjectManagement
	 *     XEqualityExpression.XBinaryOperation_1_0_0_0 returns YGetObjectManagement
	 *     XRelationalExpression returns YGetObjectManagement
	 *     XRelationalExpression.XInstanceOfExpression_1_0_0_0_0 returns YGetObjectManagement
	 *     XRelationalExpression.XBinaryOperation_1_1_0_0_0 returns YGetObjectManagement
	 *     XOtherOperatorExpression returns YGetObjectManagement
	 *     XOtherOperatorExpression.XBinaryOperation_1_0_0_0 returns YGetObjectManagement
	 *     XAdditiveExpression returns YGetObjectManagement
	 *     XAdditiveExpression.XBinaryOperation_1_0_0_0 returns YGetObjectManagement
	 *     XMultiplicativeExpression returns YGetObjectManagement
	 *     XMultiplicativeExpression.XBinaryOperation_1_0_0_0 returns YGetObjectManagement
	 *     XUnaryOperation returns YGetObjectManagement
	 *     XCastedExpression returns YGetObjectManagement
	 *     XCastedExpression.XCastedExpression_1_0_0_0 returns YGetObjectManagement
	 *     XPostfixOperation returns YGetObjectManagement
	 *     XPostfixOperation.XPostfixOperation_1_0_0 returns YGetObjectManagement
	 *     XParenthesizedExpression returns YGetObjectManagement
	 *     XExpressionOrVarDeclaration returns YGetObjectManagement
	 *
	 * Constraint:
	 *     (parameter+=XExpression parameter+=XExpression*)?
	 */
	protected void sequence_YGetObjectManagement(ISerializationContext context, YGetObjectManagement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XMemberFeatureCall returns YLoadModel
	 *     XMemberFeatureCall.XAssignment_1_0_0_0_0 returns YLoadModel
	 *     XMemberFeatureCall.YMemberFeatureCall_1_1_0_0_0 returns YLoadModel
	 *     XPrimaryExpression returns YLoadModel
	 *     XAssignment returns YLoadModel
	 *     XAssignment.XBinaryOperation_3_1_0_0_0 returns YLoadModel
	 *     YLoadModel returns YLoadModel
	 *     XExpression returns YLoadModel
	 *     XOrExpression returns YLoadModel
	 *     XOrExpression.XBinaryOperation_1_0_0_0 returns YLoadModel
	 *     XAndExpression returns YLoadModel
	 *     XAndExpression.XBinaryOperation_1_0_0_0 returns YLoadModel
	 *     XEqualityExpression returns YLoadModel
	 *     XEqualityExpression.XBinaryOperation_1_0_0_0 returns YLoadModel
	 *     XRelationalExpression returns YLoadModel
	 *     XRelationalExpression.XInstanceOfExpression_1_0_0_0_0 returns YLoadModel
	 *     XRelationalExpression.XBinaryOperation_1_1_0_0_0 returns YLoadModel
	 *     XOtherOperatorExpression returns YLoadModel
	 *     XOtherOperatorExpression.XBinaryOperation_1_0_0_0 returns YLoadModel
	 *     XAdditiveExpression returns YLoadModel
	 *     XAdditiveExpression.XBinaryOperation_1_0_0_0 returns YLoadModel
	 *     XMultiplicativeExpression returns YLoadModel
	 *     XMultiplicativeExpression.XBinaryOperation_1_0_0_0 returns YLoadModel
	 *     XUnaryOperation returns YLoadModel
	 *     XCastedExpression returns YLoadModel
	 *     XCastedExpression.XCastedExpression_1_0_0_0 returns YLoadModel
	 *     XPostfixOperation returns YLoadModel
	 *     XPostfixOperation.XPostfixOperation_1_0_0 returns YLoadModel
	 *     XParenthesizedExpression returns YLoadModel
	 *     XExpressionOrVarDeclaration returns YLoadModel
	 *
	 * Constraint:
	 *     relModelPath=XExpression
	 */
	protected void sequence_YLoadModel(ISerializationContext context, YLoadModel semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, YammPackage.Literals.YLOAD_MODEL__REL_MODEL_PATH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, YammPackage.Literals.YLOAD_MODEL__REL_MODEL_PATH));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getYLoadModelAccess().getRelModelPathXExpressionParserRuleCall_3_0(), semanticObject.getRelModelPath());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     YModel returns YModel
	 *
	 * Constraint:
	 *     (
	 *         ObjectID=EString 
	 *         (clazz+=YClass clazz+=YClass*)? 
	 *         (enumerations+=YEnumeration enumerations+=YEnumeration*)? 
	 *         (packages+=YPackage packages+=YPackage*)? 
	 *         (objects+=EObject objects+=EObject*)? 
	 *         (sharedEdges+=YSharedEdge sharedEdges+=YSharedEdge*)? 
	 *         (compositeEdges+=YCompositeEdge compositeEdges+=YCompositeEdge*)?
	 *     )
	 */
	protected void sequence_YModel(ISerializationContext context, YModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XMemberFeatureCall returns YObserverAddValue
	 *     XMemberFeatureCall.XAssignment_1_0_0_0_0 returns YObserverAddValue
	 *     XMemberFeatureCall.YMemberFeatureCall_1_1_0_0_0 returns YObserverAddValue
	 *     XPrimaryExpression returns YObserverAddValue
	 *     XAssignment returns YObserverAddValue
	 *     XAssignment.XBinaryOperation_3_1_0_0_0 returns YObserverAddValue
	 *     YObserverAddValue returns YObserverAddValue
	 *     XExpression returns YObserverAddValue
	 *     XOrExpression returns YObserverAddValue
	 *     XOrExpression.XBinaryOperation_1_0_0_0 returns YObserverAddValue
	 *     XAndExpression returns YObserverAddValue
	 *     XAndExpression.XBinaryOperation_1_0_0_0 returns YObserverAddValue
	 *     XEqualityExpression returns YObserverAddValue
	 *     XEqualityExpression.XBinaryOperation_1_0_0_0 returns YObserverAddValue
	 *     XRelationalExpression returns YObserverAddValue
	 *     XRelationalExpression.XInstanceOfExpression_1_0_0_0_0 returns YObserverAddValue
	 *     XRelationalExpression.XBinaryOperation_1_1_0_0_0 returns YObserverAddValue
	 *     XOtherOperatorExpression returns YObserverAddValue
	 *     XOtherOperatorExpression.XBinaryOperation_1_0_0_0 returns YObserverAddValue
	 *     XAdditiveExpression returns YObserverAddValue
	 *     XAdditiveExpression.XBinaryOperation_1_0_0_0 returns YObserverAddValue
	 *     XMultiplicativeExpression returns YObserverAddValue
	 *     XMultiplicativeExpression.XBinaryOperation_1_0_0_0 returns YObserverAddValue
	 *     XUnaryOperation returns YObserverAddValue
	 *     XCastedExpression returns YObserverAddValue
	 *     XCastedExpression.XCastedExpression_1_0_0_0 returns YObserverAddValue
	 *     XPostfixOperation returns YObserverAddValue
	 *     XPostfixOperation.XPostfixOperation_1_0_0 returns YObserverAddValue
	 *     XParenthesizedExpression returns YObserverAddValue
	 *     XExpressionOrVarDeclaration returns YObserverAddValue
	 *
	 * Constraint:
	 *     (parameter+=XExpression parameter+=XExpression*)
	 */
	protected void sequence_YObserverAddValue(ISerializationContext context, YObserverAddValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     YElement returns YOperation
	 *     YNamedElement returns YOperation
	 *     YFeature returns YOperation
	 *     YNamespace returns YOperation
	 *     YOperation returns YOperation
	 *
	 * Constraint:
	 *     (
	 *         ObjectID=EString 
	 *         name=EString? 
	 *         clazz=[YClass|ID]? 
	 *         returnType=[YType|EString2]? 
	 *         lower=EInt? 
	 *         upper=EInt? 
	 *         (ownedParameter+=YParameter ownedParameter+=YParameter*)? 
	 *         stateMachine=YStateMachine?
	 *     )
	 */
	protected void sequence_YOperation(ISerializationContext context, YOperation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     YElement returns YPackageImport
	 *     YPackageImport returns YPackageImport
	 *
	 * Constraint:
	 *     (
	 *         ObjectID=EString 
	 *         importedPackage=[YPackage|EString] 
	 *         importingNamespace=[YNamespace|EString] 
	 *         ownedComment=YComment? 
	 *         (ownedElement+=YElement ownedElement+=YElement*)?
	 *     )
	 */
	protected void sequence_YPackageImport(ISerializationContext context, YPackageImport semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     YElement returns YPackage
	 *     YNamedElement returns YPackage
	 *     YPackageableElement returns YPackage
	 *     YNamespace returns YPackage
	 *     YPackage returns YPackage
	 *
	 * Constraint:
	 *     (
	 *         ObjectID=EString 
	 *         name=EString? 
	 *         qualifiedName=EString? 
	 *         package=[YPackage|EString2]? 
	 *         (ownedMemberPackage+=YPackageableElement ownedMemberPackage+=YPackageableElement*)?
	 *     )
	 */
	protected void sequence_YPackage(ISerializationContext context, YPackage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     YElement returns YParameter
	 *     YNamedElement returns YParameter
	 *     YParameter returns YParameter
	 *
	 * Constraint:
	 *     (
	 *         isOrdered?='yIsOrdered'? 
	 *         isUnique?='yIsUnique'? 
	 *         upperboundWildcard?='yUpperboundWildcard'? 
	 *         ObjectID=EString 
	 *         lower=EInt? 
	 *         upper=EInt? 
	 *         name=EString? 
	 *         qualifiedName=EString? 
	 *         direction=ParameterDirectionKind? 
	 *         defaultValue=EString? 
	 *         description=EString? 
	 *         type=[YType|EString2]?
	 *     )
	 */
	protected void sequence_YParameter(ISerializationContext context, YParameter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     YElement returns YPrimitiveType
	 *     YNamedElement returns YPrimitiveType
	 *     YPackageableElement returns YPrimitiveType
	 *     YClassifier returns YPrimitiveType
	 *     YType returns YPrimitiveType
	 *     YNamespace returns YPrimitiveType
	 *     YPrimitiveType returns YPrimitiveType
	 *
	 * Constraint:
	 *     (
	 *         isAbstract?='yIsAbstract' 
	 *         ObjectID=EString 
	 *         name=EString? 
	 *         qualifiedName=EString? 
	 *         (member+=[YNamedElement|EString] member+=[YNamedElement|EString]*)? 
	 *         (elementImport+=[YPackageableElement|EString] elementImport+=[YPackageableElement|EString]*)? 
	 *         (importedMember+=[YPackageableElement|EString] importedMember+=[YPackageableElement|EString]*)? 
	 *         (packageImport+=[YPackageableElement|EString] packageImport+=[YPackageableElement|EString]*)? 
	 *         (attribute+=[YProperty|EString] attribute+=[YProperty|EString]*)? 
	 *         (feature+=[YFeature|EString] feature+=[YFeature|EString]*)? 
	 *         (general+=[YClassifier|EString] general+=[YClassifier|EString]*)? 
	 *         (inheritedMember+=[YNamedElement|EString] inheritedMember+=[YNamedElement|EString]*)? 
	 *         package=[YNamedElement|EString]? 
	 *         ownedComment=YComment? 
	 *         (ownedElement+=YElement ownedElement+=YElement*)? 
	 *         (ownedMember+=YNamedElement ownedMember+=YNamedElement*)? 
	 *         (ownedRule+=YConstraint ownedRule+=YConstraint*)?
	 *     )
	 */
	protected void sequence_YPrimitiveType(ISerializationContext context, YPrimitiveType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XMemberFeatureCall returns YPrintExpression
	 *     XMemberFeatureCall.XAssignment_1_0_0_0_0 returns YPrintExpression
	 *     XMemberFeatureCall.YMemberFeatureCall_1_1_0_0_0 returns YPrintExpression
	 *     XPrimaryExpression returns YPrintExpression
	 *     XAssignment returns YPrintExpression
	 *     XAssignment.XBinaryOperation_3_1_0_0_0 returns YPrintExpression
	 *     YPrintExpression returns YPrintExpression
	 *     XExpression returns YPrintExpression
	 *     XOrExpression returns YPrintExpression
	 *     XOrExpression.XBinaryOperation_1_0_0_0 returns YPrintExpression
	 *     XAndExpression returns YPrintExpression
	 *     XAndExpression.XBinaryOperation_1_0_0_0 returns YPrintExpression
	 *     XEqualityExpression returns YPrintExpression
	 *     XEqualityExpression.XBinaryOperation_1_0_0_0 returns YPrintExpression
	 *     XRelationalExpression returns YPrintExpression
	 *     XRelationalExpression.XInstanceOfExpression_1_0_0_0_0 returns YPrintExpression
	 *     XRelationalExpression.XBinaryOperation_1_1_0_0_0 returns YPrintExpression
	 *     XOtherOperatorExpression returns YPrintExpression
	 *     XOtherOperatorExpression.XBinaryOperation_1_0_0_0 returns YPrintExpression
	 *     XAdditiveExpression returns YPrintExpression
	 *     XAdditiveExpression.XBinaryOperation_1_0_0_0 returns YPrintExpression
	 *     XMultiplicativeExpression returns YPrintExpression
	 *     XMultiplicativeExpression.XBinaryOperation_1_0_0_0 returns YPrintExpression
	 *     XUnaryOperation returns YPrintExpression
	 *     XCastedExpression returns YPrintExpression
	 *     XCastedExpression.XCastedExpression_1_0_0_0 returns YPrintExpression
	 *     XPostfixOperation returns YPrintExpression
	 *     XPostfixOperation.XPostfixOperation_1_0_0 returns YPrintExpression
	 *     XParenthesizedExpression returns YPrintExpression
	 *     XExpressionOrVarDeclaration returns YPrintExpression
	 *
	 * Constraint:
	 *     expression=XExpression
	 */
	protected void sequence_YPrintExpression(ISerializationContext context, YPrintExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, YammPackage.Literals.YPRINT_EXPRESSION__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, YammPackage.Literals.YPRINT_EXPRESSION__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getYPrintExpressionAccess().getExpressionXExpressionParserRuleCall_1_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     YElement returns YProperty
	 *     YNamedElement returns YProperty
	 *     YFeature returns YProperty
	 *     YProperty returns YProperty
	 *
	 * Constraint:
	 *     (
	 *         isOrdered?='yIsOrdered'? 
	 *         isDerived?='yIsDerived'? 
	 *         isDerivedUnion?='yIsDerivedUnion'? 
	 *         association?='yAssociation'? 
	 *         isUnique?='yIsUnique'? 
	 *         ObjectID=EString 
	 *         clazz=[YClass|ID]? 
	 *         visibility=YVisibilityKind? 
	 *         name=EString? 
	 *         qualifiedName=EString? 
	 *         static?='yStatic'? 
	 *         lower=EInt? 
	 *         upper=EInt? 
	 *         aggregation=YAggregationKind? 
	 *         defaultValue=EString? 
	 *         description=EString? 
	 *         invarinat=EString? 
	 *         (featuringClassifier+=[YClass|EString] featuringClassifier+=[YClass|EString]*)? 
	 *         type=[YType|EString2]? 
	 *         (subsettedProperty+=[YProperty|EString] subsettedProperty+=[YProperty|EString]*)? 
	 *         opposite=[YProperty|EString2]? 
	 *         observe?='yObserve'? 
	 *         ownedComment=YComment? 
	 *         (ownedElement+=YElement ownedElement+=YElement*)?
	 *     )
	 */
	protected void sequence_YProperty(ISerializationContext context, YProperty semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     YElement returns YPseudostate
	 *     YNamedElement returns YPseudostate
	 *     YVertex returns YPseudostate
	 *     YPseudostate returns YPseudostate
	 *
	 * Constraint:
	 *     (
	 *         ObjectID=EString 
	 *         name=EString? 
	 *         qualifiedName=EString? 
	 *         (outgoing+=[YTransition|EString] outgoing+=[YTransition|EString]*)? 
	 *         (incoming+=[YTransition|EString] incoming+=[YTransition|EString]*)?
	 *     )
	 */
	protected void sequence_YPseudostate(ISerializationContext context, YPseudostate semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XMemberFeatureCall returns YSetReturnValue
	 *     XMemberFeatureCall.XAssignment_1_0_0_0_0 returns YSetReturnValue
	 *     XMemberFeatureCall.YMemberFeatureCall_1_1_0_0_0 returns YSetReturnValue
	 *     XPrimaryExpression returns YSetReturnValue
	 *     XAssignment returns YSetReturnValue
	 *     XAssignment.XBinaryOperation_3_1_0_0_0 returns YSetReturnValue
	 *     YSetReturnValue returns YSetReturnValue
	 *     XExpression returns YSetReturnValue
	 *     XOrExpression returns YSetReturnValue
	 *     XOrExpression.XBinaryOperation_1_0_0_0 returns YSetReturnValue
	 *     XAndExpression returns YSetReturnValue
	 *     XAndExpression.XBinaryOperation_1_0_0_0 returns YSetReturnValue
	 *     XEqualityExpression returns YSetReturnValue
	 *     XEqualityExpression.XBinaryOperation_1_0_0_0 returns YSetReturnValue
	 *     XRelationalExpression returns YSetReturnValue
	 *     XRelationalExpression.XInstanceOfExpression_1_0_0_0_0 returns YSetReturnValue
	 *     XRelationalExpression.XBinaryOperation_1_1_0_0_0 returns YSetReturnValue
	 *     XOtherOperatorExpression returns YSetReturnValue
	 *     XOtherOperatorExpression.XBinaryOperation_1_0_0_0 returns YSetReturnValue
	 *     XAdditiveExpression returns YSetReturnValue
	 *     XAdditiveExpression.XBinaryOperation_1_0_0_0 returns YSetReturnValue
	 *     XMultiplicativeExpression returns YSetReturnValue
	 *     XMultiplicativeExpression.XBinaryOperation_1_0_0_0 returns YSetReturnValue
	 *     XUnaryOperation returns YSetReturnValue
	 *     XCastedExpression returns YSetReturnValue
	 *     XCastedExpression.XCastedExpression_1_0_0_0 returns YSetReturnValue
	 *     XPostfixOperation returns YSetReturnValue
	 *     XPostfixOperation.XPostfixOperation_1_0_0 returns YSetReturnValue
	 *     XParenthesizedExpression returns YSetReturnValue
	 *     XExpressionOrVarDeclaration returns YSetReturnValue
	 *
	 * Constraint:
	 *     value=XExpression
	 */
	protected void sequence_YSetReturnValue(ISerializationContext context, YSetReturnValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, YammPackage.Literals.YSET_RETURN_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, YammPackage.Literals.YSET_RETURN_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getYSetReturnValueAccess().getValueXExpressionParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     YSharedEdge returns YSharedEdge
	 *
	 * Constraint:
	 *     (ObjectID=EString description=EString? source=[YClass|EString] target=[YClass|EString])
	 */
	protected void sequence_YSharedEdge(ISerializationContext context, YSharedEdge semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     YElement returns YStateMachine
	 *     YNamedElement returns YStateMachine
	 *     YStateMachine returns YStateMachine
	 *
	 * Constraint:
	 *     (
	 *         ObjectID=EString 
	 *         initialActive?='yInitialActive'? 
	 *         desInitializer?='yDesInitializer'? 
	 *         name=EString? 
	 *         qualifiedName=EString? 
	 *         rtc=RunToCompletion 
	 *         maxEffectsToBeProcessed=EInt? 
	 *         calledOperation=[YOperation|EString]? 
	 *         ownedComment=YComment? 
	 *         (ownedElement+=YElement ownedElement+=YElement*)? 
	 *         (transition+=YTransition transition+=YTransition*)? 
	 *         (subvertex+=YVertex subvertex+=YVertex*)? 
	 *         (trAttach+=YTrAttachment trAttach+=YTrAttachment*)?
	 *     )
	 */
	protected void sequence_YStateMachine(ISerializationContext context, YStateMachine semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     YElement returns YState
	 *     YNamedElement returns YState
	 *     YNamespace returns YState
	 *     YVertex returns YState
	 *     YState returns YState
	 *
	 * Constraint:
	 *     (
	 *         ObjectID=EString 
	 *         name=EString? 
	 *         qualifiedName=EString? 
	 *         (outgoing+=[YTransition|EString] outgoing+=[YTransition|EString]*)? 
	 *         (incoming+=[YTransition|EString] incoming+=[YTransition|EString]*)?
	 *     )
	 */
	protected void sequence_YState(ISerializationContext context, YState semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XMemberFeatureCall returns YTimeStep
	 *     XMemberFeatureCall.XAssignment_1_0_0_0_0 returns YTimeStep
	 *     XMemberFeatureCall.YMemberFeatureCall_1_1_0_0_0 returns YTimeStep
	 *     XPrimaryExpression returns YTimeStep
	 *     XAssignment returns YTimeStep
	 *     XAssignment.XBinaryOperation_3_1_0_0_0 returns YTimeStep
	 *     YTimeStep returns YTimeStep
	 *     XExpression returns YTimeStep
	 *     XOrExpression returns YTimeStep
	 *     XOrExpression.XBinaryOperation_1_0_0_0 returns YTimeStep
	 *     XAndExpression returns YTimeStep
	 *     XAndExpression.XBinaryOperation_1_0_0_0 returns YTimeStep
	 *     XEqualityExpression returns YTimeStep
	 *     XEqualityExpression.XBinaryOperation_1_0_0_0 returns YTimeStep
	 *     XRelationalExpression returns YTimeStep
	 *     XRelationalExpression.XInstanceOfExpression_1_0_0_0_0 returns YTimeStep
	 *     XRelationalExpression.XBinaryOperation_1_1_0_0_0 returns YTimeStep
	 *     XOtherOperatorExpression returns YTimeStep
	 *     XOtherOperatorExpression.XBinaryOperation_1_0_0_0 returns YTimeStep
	 *     XAdditiveExpression returns YTimeStep
	 *     XAdditiveExpression.XBinaryOperation_1_0_0_0 returns YTimeStep
	 *     XMultiplicativeExpression returns YTimeStep
	 *     XMultiplicativeExpression.XBinaryOperation_1_0_0_0 returns YTimeStep
	 *     XUnaryOperation returns YTimeStep
	 *     XCastedExpression returns YTimeStep
	 *     XCastedExpression.XCastedExpression_1_0_0_0 returns YTimeStep
	 *     XPostfixOperation returns YTimeStep
	 *     XPostfixOperation.XPostfixOperation_1_0_0 returns YTimeStep
	 *     XParenthesizedExpression returns YTimeStep
	 *     XExpressionOrVarDeclaration returns YTimeStep
	 *
	 * Constraint:
	 *     {YTimeStep}
	 */
	protected void sequence_YTimeStep(ISerializationContext context, YTimeStep semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     YElement returns YTrAttachment
	 *     YNamedElement returns YTrAttachment
	 *     YTrAttachment returns YTrAttachment
	 *
	 * Constraint:
	 *     (
	 *         ObjectID=EString 
	 *         name=EString? 
	 *         qualifiedName=EString? 
	 *         guard=XExpression 
	 *         transition=[YTransition|EString]? 
	 *         (effects+=YEffect effects+=YEffect*)?
	 *     )
	 */
	protected void sequence_YTrAttachment(ISerializationContext context, YTrAttachment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     YElement returns YTransition
	 *     YNamedElement returns YTransition
	 *     YTransition returns YTransition
	 *
	 * Constraint:
	 *     (
	 *         ObjectID=EString 
	 *         name=EString? 
	 *         qualifiedName=EString? 
	 *         source=[YVertex|EString] 
	 *         target=[YVertex|EString] 
	 *         attachment=[YTrAttachment|EString]? 
	 *         ownedComment=YComment? 
	 *         (ownedElement+=YElement ownedElement+=YElement*)?
	 *     )
	 */
	protected void sequence_YTransition(ISerializationContext context, YTransition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
