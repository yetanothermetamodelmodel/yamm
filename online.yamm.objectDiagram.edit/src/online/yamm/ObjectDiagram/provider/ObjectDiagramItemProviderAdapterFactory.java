/**
 * Copyright (C) 2019 yamm.online, Ralf Buscherm√∂hle
 * 	
 * YAMM is made available under the terms of the Eclipse Public License 2.0
 * which is available at https://www.eclipse.org/legal/epl-2.0/
 * 
 * YAMM makes use of JScience - Java(TM) Tools and Libraries for the 
 * Advancement of Sciences: Copyright (C) 2006 - JScience (http://jscience.org/) 
 * All rights reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * 
 * see LICENSE.txt
 * 
 */
/**
 */
package online.yamm.ObjectDiagram.provider;

import java.util.ArrayList;
import java.util.Collection;

import online.yamm.ObjectDiagram.util.ObjectDiagramAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ObjectDiagramItemProviderAdapterFactory extends ObjectDiagramAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ObjectDiagramItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link online.yamm.ObjectDiagram.ObjectDiagram} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ObjectDiagramItemProvider objectDiagramItemProvider;

	/**
	 * This creates an adapter for a {@link online.yamm.ObjectDiagram.ObjectDiagram}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createObjectDiagramAdapter() {
		if (objectDiagramItemProvider == null) {
			objectDiagramItemProvider = new ObjectDiagramItemProvider(this);
		}

		return objectDiagramItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link online.yamm.ObjectDiagram.ODObject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ODObjectItemProvider odObjectItemProvider;

	/**
	 * This creates an adapter for a {@link online.yamm.ObjectDiagram.ODObject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createODObjectAdapter() {
		if (odObjectItemProvider == null) {
			odObjectItemProvider = new ODObjectItemProvider(this);
		}

		return odObjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link online.yamm.ObjectDiagram.ODType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ODTypeItemProvider odTypeItemProvider;

	/**
	 * This creates an adapter for a {@link online.yamm.ObjectDiagram.ODType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createODTypeAdapter() {
		if (odTypeItemProvider == null) {
			odTypeItemProvider = new ODTypeItemProvider(this);
		}

		return odTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link online.yamm.ObjectDiagram.ODReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ODReferenceItemProvider odReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link online.yamm.ObjectDiagram.ODReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createODReferenceAdapter() {
		if (odReferenceItemProvider == null) {
			odReferenceItemProvider = new ODReferenceItemProvider(this);
		}

		return odReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link online.yamm.ObjectDiagram.ODDateType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ODDateTypeItemProvider odDateTypeItemProvider;

	/**
	 * This creates an adapter for a {@link online.yamm.ObjectDiagram.ODDateType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createODDateTypeAdapter() {
		if (odDateTypeItemProvider == null) {
			odDateTypeItemProvider = new ODDateTypeItemProvider(this);
		}

		return odDateTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link online.yamm.ObjectDiagram.ODAttribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ODAttributeItemProvider odAttributeItemProvider;

	/**
	 * This creates an adapter for a {@link online.yamm.ObjectDiagram.ODAttribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createODAttributeAdapter() {
		if (odAttributeItemProvider == null) {
			odAttributeItemProvider = new ODAttributeItemProvider(this);
		}

		return odAttributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link online.yamm.ObjectDiagram.ODStackframe} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ODStackframeItemProvider odStackframeItemProvider;

	/**
	 * This creates an adapter for a {@link online.yamm.ObjectDiagram.ODStackframe}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createODStackframeAdapter() {
		if (odStackframeItemProvider == null) {
			odStackframeItemProvider = new ODStackframeItemProvider(this);
		}

		return odStackframeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link java.util.Map.Entry} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EStringToODTypeMapItemProvider eStringToODTypeMapItemProvider;

	/**
	 * This creates an adapter for a {@link java.util.Map.Entry}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEStringToODTypeMapAdapter() {
		if (eStringToODTypeMapItemProvider == null) {
			eStringToODTypeMapItemProvider = new EStringToODTypeMapItemProvider(this);
		}

		return eStringToODTypeMapItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (objectDiagramItemProvider != null) objectDiagramItemProvider.dispose();
		if (odObjectItemProvider != null) odObjectItemProvider.dispose();
		if (odTypeItemProvider != null) odTypeItemProvider.dispose();
		if (odReferenceItemProvider != null) odReferenceItemProvider.dispose();
		if (odDateTypeItemProvider != null) odDateTypeItemProvider.dispose();
		if (odAttributeItemProvider != null) odAttributeItemProvider.dispose();
		if (odStackframeItemProvider != null) odStackframeItemProvider.dispose();
		if (eStringToODTypeMapItemProvider != null) eStringToODTypeMapItemProvider.dispose();
	}

}
